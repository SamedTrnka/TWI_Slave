
TWI_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000066  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000537  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004c7  00000000  00000000  00000687  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ee  00000000  00000000  00000b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002a5  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001015  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	0a d0       	rcall	.+20     	; 0x48 <main>
  34:	16 c0       	rjmp	.+44     	; 0x62 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <TWI_SR>:
#include <avr/io.h>


uint8_t TWI_SR()
{
	TWCR=0b11000100; // TWINT=1, TWEA=1, TWEN=1
  38:	84 ec       	ldi	r24, 0xC4	; 196
  3a:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT))); // warte auf TWINT=1
  3c:	06 b6       	in	r0, 0x36	; 54
  3e:	07 fe       	sbrs	r0, 7
  40:	fd cf       	rjmp	.-6      	; 0x3c <TWI_SR+0x4>
	return(TWSR&0xf8); // Status zurückgeben
  42:	81 b1       	in	r24, 0x01	; 1
}
  44:	88 7f       	andi	r24, 0xF8	; 248
  46:	08 95       	ret

00000048 <main>:
int main(void)
{
	DDRB|=0x01; // PB0 zur Ausgabe
  48:	87 b3       	in	r24, 0x17	; 23
  4a:	81 60       	ori	r24, 0x01	; 1
  4c:	87 bb       	out	0x17, r24	; 23
	TWAR=0b00000010; // Slave-Adresse 0x02, TWGCE=0
  4e:	82 e0       	ldi	r24, 0x02	; 2
  50:	82 b9       	out	0x02, r24	; 2
	while(1)
	{
		if(TWI_SR()==0x60) PORTB^=0x01;
  52:	f2 df       	rcall	.-28     	; 0x38 <TWI_SR>
  54:	80 36       	cpi	r24, 0x60	; 96
  56:	e9 f7       	brne	.-6      	; 0x52 <main+0xa>
  58:	98 b3       	in	r25, 0x18	; 24
  5a:	81 e0       	ldi	r24, 0x01	; 1
  5c:	89 27       	eor	r24, r25
  5e:	88 bb       	out	0x18, r24	; 24
  60:	f8 cf       	rjmp	.-16     	; 0x52 <main+0xa>

00000062 <_exit>:
  62:	f8 94       	cli

00000064 <__stop_program>:
  64:	ff cf       	rjmp	.-2      	; 0x64 <__stop_program>
